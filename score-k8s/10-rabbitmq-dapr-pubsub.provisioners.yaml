- uri: template://community-provisioners/rabbitmq-dapr-pubsub
  type: dapr-pubsub
  init: |
    randomVHost: vhost-{{ randAlpha 8 }}
    randomUsername: user-{{ randAlpha 8 }}
    randomPassword: {{ randAlphaNum 16 | quote }}
    port: 5672
    managementPort: 15672
  state: |
    service: rabbitmq-{{ .SourceWorkload }}-{{ substr 0 8 .Guid | lower }}
    vhost: {{ dig "vhost" .Init.randomVHost .State | quote }}
    username: {{ dig "username" .Init.randomUsername .State | quote }}
    password: {{ dig "password" .Init.randomPassword .State | quote }}
  outputs: |
    name: {{ .State.service }}
  manifests: |
    - apiVersion: dapr.io/v1alpha1
      kind: Component
      metadata:
        name: {{ .State.service }}
      spec:
        type: pubsub.rabbitmq
        version: v1
        metadata:
        - name: connectionString
          value: "amqp://{{ .State.service }}:{{ .Init.port }}"
        - name: protocol
          value: amqp
        - name: hostname
          value: {{ .State.service }}
        - name: username
          value: {{ .State.username }}
        - name: password
          value: {{ .State.password }}
    - apiVersion: v1
      kind: Secret
      metadata:
        name: {{ .State.service }}-secret
        annotations:
          k8s.score.dev/source-workload: {{ .SourceWorkload }}
          k8s.score.dev/resource-uid: {{ .Uid }}
          k8s.score.dev/resource-guid: {{ .Guid }}
        labels:
          app.kubernetes.io/managed-by: score-k8s
          app.kubernetes.io/name: {{ .State.service }}-secret
          app.kubernetes.io/instance: {{ .State.service }}
      data:
        RABBITMQ_DEFAULT_VHOST: {{ .State.vhost | b64enc }}
        RABBITMQ_DEFAULT_USER: {{ .State.username | b64enc }}
        RABBITMQ_DEFAULT_PASS: {{ .State.password | b64enc }}
    - apiVersion: apps/v1
      kind: StatefulSet
      metadata:
        name: {{ .State.service }}
        annotations:
          k8s.score.dev/source-workload: {{ .SourceWorkload }}
          k8s.score.dev/resource-uid: {{ .Uid }}
          k8s.score.dev/resource-guid: {{ .Guid }}
        labels:
          app.kubernetes.io/managed-by: score-k8s
          app.kubernetes.io/name: {{ .State.service }}
          app.kubernetes.io/instance: {{ .State.service }}
      spec:
        serviceName: {{ .State.service }}
        replicas: 1
        selector:
          matchLabels:
            app.kubernetes.io/instance: {{ .State.service }}
        template:
          metadata:
            labels:
              app.kubernetes.io/managed-by: score-k8s
              app.kubernetes.io/name: {{ .State.service }}
              app.kubernetes.io/instance: {{ .State.service }}
          spec:
            containers:
              - name: rabbitmq
                image: rabbitmq:3-management
                ports:
                  - name: amqp
                    containerPort: {{ .Init.port }}
                  - name: management
                    containerPort: {{ .Init.managementPort }}
                envFrom:
                  - secretRef:
                      name: {{ .State.service }}-secret
                volumeMounts:
                  - name: data
                    mountPath: /var/lib/rabbitmq
                readinessProbe:
                  exec:
                    command:
                      - rabbitmq-diagnostics
                      - -q
                      - check_port_connectivity
                  periodSeconds: 3
                  initialDelaySeconds: 30
                  timeoutSeconds: 5
        volumeClaimTemplates:
          - metadata:
              name: data
            spec:
              accessModes: ["ReadWriteOnce"]
              resources:
                requests:
                  storage: 3Gi
    - apiVersion: v1
      kind: Service
      metadata:
        name: {{ .State.service }}
        annotations:
          k8s.score.dev/source-workload: {{ .SourceWorkload }}
          k8s.score.dev/resource-uid: {{ .Uid }}
          k8s.score.dev/resource-guid: {{ .Guid }}
        labels:
          app.kubernetes.io/managed-by: score-k8s
          app.kubernetes.io/name: {{ .State.service }}
          app.kubernetes.io/instance: {{ .State.service }}
      spec:
        ports:
          - port: {{ .Init.port }}
            targetPort: {{ .Init.port }}
            name: amqp
          - port: {{ .Init.managementPort }}
            targetPort: {{ .Init.managementPort }}
            name: management
        selector:
          app.kubernetes.io/instance: {{ .State.service }}
        type: ClusterIP